import type {
	Item,
	Player,
	Equipment,
	TaskCategory,
	EquipmentType,
	PlayerStats,
	Task,
	Potion,
	PotionRarity,
} from '../types'

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Ç–∏–ø—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
export const CATEGORY_TO_EQUIPMENT: Record<TaskCategory, EquipmentType> = {
	english: 'armor',
	work: 'rightHand',
	university: 'helmet',
	home: 'boots',
	fitness: 'leftHand',
	personal: 'armor', // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—Ä–æ–Ω—è
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
const ITEM_DATA: Record<
	EquipmentType,
	{ name: string; icon: string; description: string }
> = {
	helmet: {
		name: '–®–ª–µ–º –ó–Ω–∞–Ω–∏–π',
		icon: 'üéì',
		description: '–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –Ω–µ–≤–µ–∂–µ—Å—Ç–≤–∞ –∏ –¥–∞–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å',
	},
	armor: {
		name: '–ë—Ä–æ–Ω—è –ü–æ–ª–∏–≥–ª–æ—Ç–∞',
		icon: 'üõ°Ô∏è',
		description: '–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç —è–∑—ã–∫–æ–≤—ã—Ö –±–∞—Ä—å–µ—Ä–æ–≤',
	},
	leftHand: {
		name: '–©–∏—Ç –ó–¥–æ—Ä–æ–≤—å—è',
		icon: 'üí™',
		description: '–î–∞–µ—Ç —Å–∏–ª—É –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
	},
	rightHand: {
		name: '–ú–µ—á –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
		icon: '‚öîÔ∏è',
		description: '–†—É–±–∏—Ç —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –º–∞—Å–ª–æ',
	},
	boots: {
		name: '–°–∞–ø–æ–≥–∏ –î–æ–º–æ–≤–µ–Ω–∫–∞',
		icon: 'üëü',
		description: '–£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–º–∞—à–Ω–∏—Ö –¥–µ–ª',
	},
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
export const createInitialItem = (type: EquipmentType): Item => {
	const itemData = ITEM_DATA[type]
	return {
		id: `${type}_initial`,
		type,
		name: itemData.name,
		icon: itemData.icon,
		description: itemData.description,
		level: 1,
		experience: 0,
		maxExperience: 250,
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
export const createInitialEquipment = (): Equipment => ({
	helmet: createInitialItem('helmet'),
	armor: createInitialItem('armor'),
	leftHand: createInitialItem('leftHand'),
	rightHand: createInitialItem('rightHand'),
	boots: createInitialItem('boots'),
})

// –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞
export const calculatePlayerStats = (equipment: Equipment): PlayerStats => ({
	strength: equipment.rightHand.level * 10 + equipment.leftHand.level * 5,
	defense: equipment.armor.level * 15,
	intelligence: equipment.helmet.level * 12,
	agility: equipment.boots.level * 8,
	health: equipment.leftHand.level * 20,
})

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
export const createInitialPlayer = (): Player => {
	const equipment = createInitialEquipment()
	return {
		id: 'player_main',
		name: '–ì–µ—Ä–æ–π –†–µ–∞–ª—å–Ω–æ—Å—Ç–∏',
		level: 1,
		experience: 0,
		maxExperience: 300,
		equipment,
		totalStats: calculatePlayerStats(equipment),
	}
}

// –†–∞—Å—á–µ—Ç –æ–ø—ã—Ç–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
export const calculateTaskExperience = (
	difficulty: number,
	unwillingness: number,
): number => {
	return Math.floor(difficulty * unwillingness * 10)
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
export const createTestTask = (
	title: string,
	category: TaskCategory,
	difficulty: number = 5,
	unwillingness: number = 5,
): Task => ({
	id: `task_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
	title,
	description: `–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`,
	difficulty,
	unwillingness,
	category,
	completed: false,
	experience: calculateTaskExperience(difficulty, unwillingness),
	realDifficulty: difficulty,
	createdAt: new Date(),
})

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
export const generateTestTasks = (): Task[] => [
	createTestTask('–ò–∑—É—á–∏—Ç—å 20 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤', 'english', 6, 4),
	createTestTask('–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É', 'work', 8, 7),
	createTestTask('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≥–ª–∞–≤—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ', 'university', 5, 8),
	createTestTask('–£–±—Ä–∞—Ç—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ', 'home', 4, 9),
	createTestTask('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ', 'fitness', 7, 6),
	createTestTask('–ú–µ–¥–∏—Ç–∞—Ü–∏—è 15 –º–∏–Ω—É—Ç', 'personal', 3, 5),
]

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const getCategoryIcon = (category: TaskCategory): string => {
	const icons = {
		english: 'üõ°Ô∏è',
		work: '‚öîÔ∏è',
		university: 'üéì',
		home: 'üëü',
		fitness: 'üí™',
		personal: '‚ú®',
	}
	return icons[category]
}

export const getCategoryName = (category: TaskCategory): string => {
	const names = {
		english: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
		work: '–†–∞–±–æ—Ç–∞',
		university: '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
		home: '–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
		fitness: '–§–∏—Ç–Ω–µ—Å',
		personal: '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
	}
	return names[category]
}

export const getRarityColor = (rarity: PotionRarity): string => {
	const colors = {
		common: '#95a5a6',
		rare: '#3498db',
		epic: '#9b59b6',
		legendary: '#f39c12',
	}
	return colors[rarity]
}

const POTION_REWARDS_EXTENDED = {
	common: [
		{
			name: '–ö–æ—Ñ–µ-–±—Ä–µ–π–∫',
			icon: '‚òï',
			description: '15 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞ —Å –ª—é–±–∏–º—ã–º –Ω–∞–ø–∏—Ç–∫–æ–º',
		},
		{
			name: '–°–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å',
			icon: 'üç´',
			description: '–ú–∞–ª–µ–Ω—å–∫–æ–µ —Å–ª–∞–¥–∫–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ',
		},
		{
			name: '–ü—Ä–æ–≥—É–ª–∫–∞',
			icon: 'üö∂',
			description: '30-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
		},
		{ name: '–ß–∞–π —Å –ø–µ—á–µ–Ω—å–µ–º', icon: 'üç™', description: '–£—é—Ç–Ω—ã–π —á–∞–µ–ø–∏—Ç–∏–µ' },
	],
	rare: [
		{
			name: '–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
			icon: 'üéÆ',
			description: '1 —á–∞—Å –ª—é–±–∏–º–æ–π –∏–≥—Ä—ã',
		},
		{
			name: '–í–∫—É—Å–Ω—ã–π —É–∂–∏–Ω',
			icon: 'üçï',
			description: '–ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ',
		},
		{
			name: '–§–∏–ª—å–º –≤–µ—á–µ—Ä–æ–º',
			icon: 'üé¨',
			description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º',
		},
		{
			name: '–ü–æ–∫—É–ø–∫–∞ –∂–µ–ª–∞–Ω–∏—è',
			icon: 'üõí',
			description: '–ö—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ (–¥–æ 1000‚ÇΩ)',
		},
	],
	epic: [
		{
			name: '–ü–æ—Ö–æ–¥ –≤ Burger King',
			icon: 'üçî',
			description: '–õ—é–±–∏–º—ã–π —Ñ–∞—Å—Ç—Ñ—É–¥',
		},
		{
			name: '–°–µ–∞–Ω—Å –≤ –∫–∏–Ω–æ',
			icon: 'üé≠',
			description: '–ë–∏–ª–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º',
		},
		{
			name: '–ü–æ–∫—É–ø–∫–∞ –º–µ—á—Ç—ã',
			icon: 'üéÅ',
			description: '–ö—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ (–¥–æ 3000‚ÇΩ)',
		},
		{
			name: '–î–µ–Ω—å –±–µ–∑ –¥–µ–ª',
			icon: 'üèñÔ∏è',
			description: '–¶–µ–ª—ã–π –¥–µ–Ω—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞',
		},
		{
			name: '–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞/–∏–≥—Ä–∞',
			icon: 'üìö',
			description: '–ö—É–ø–∏—Ç—å –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—É—é –Ω–æ–≤–∏–Ω–∫—É',
		},
	],
	legendary: [
		{
			name: '–í—ã—Ö–æ–¥–Ω—ã–µ –º–µ—á—Ç—ã',
			icon: 'üèñÔ∏è',
			description: '–ò–¥–µ–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ —Ç–≤–æ–µ–º—É –ø–ª–∞–Ω—É',
		},
		{
			name: '–ñ–µ–ª–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å',
			icon: '‚≠ê',
			description: '–ò—Å–ø–æ–ª–Ω–∏ –ª—é–±–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ',
		},
		{
			name: '–ë–æ–ª—å—à–∞—è –ø–æ–∫—É–ø–∫–∞',
			icon: 'üíé',
			description: '–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (–¥–æ 10000‚ÇΩ)',
		},
		{
			name: '–ú–∏–Ω–∏-–æ—Ç–ø—É—Å–∫',
			icon: '‚úàÔ∏è',
			description: '–ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞ –∫—É–¥–∞ –∑–∞—Ö–æ—á–µ—à—å',
		},
		{
			name: 'VIP –¥–µ–Ω—å',
			icon: 'üëë',
			description: '–î–µ–Ω—å, –∫–æ–≥–¥–∞ –≤—Å–µ –∫—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è',
		},
	],
}

const RARITY_ORDER = ['common', 'rare', 'epic', 'legendary']
const RARITY_PRICE: Record<PotionRarity, number> = {
	common: 40,
	rare: 65,
	epic: 92,
	legendary: 102,
}

function getRandomPotionByRarity(rarity: PotionRarity) {
	const potions = POTION_REWARDS_EXTENDED[rarity]
	const potion = potions[Math.floor(Math.random() * potions.length)]

	return {
		id: `potion_${Date.now()}_${Math.random().toString(36).slice(2, 9)}`,
		name: potion.name,
		icon: potion.icon,
		description: potion.description,
		rarity,
		used: false,
		createdAt: new Date(),
	}
}

export const getBestPotion = (potions: Potion[]) => {
	return potions.reduce((best, current) => {
		if (
			RARITY_ORDER.indexOf(current.rarity) >
			RARITY_ORDER.indexOf(best.rarity)
		) {
			return current
		}
		return best
	}, potions[0])
}

export const getRandomPotion = (realDifficulty: number) => {
	let rarity: PotionRarity = 'common'

	const roll = Math.random() * 100 + realDifficulty / 23 // 23 = max(realDifficulty) * 10

	if (roll >= RARITY_PRICE.legendary) rarity = 'legendary'
	else if (roll >= RARITY_PRICE.epic) rarity = 'epic'
	else if (roll >= RARITY_PRICE.rare) rarity = 'rare'
	else rarity = 'common'

	return getRandomPotionByRarity(rarity)
}

export const generateArrayOfCommonsPotions = (count: number) => {
	const potions: Potion[] = new Array(count)

	for (let i = 0; i < count; i++) {
		potions[i] = getRandomPotionByRarity('common')
	}

	return potions
}

export const generatePotionsArrayByTask = (
	task: Task,
	countPotions: number,
) => {
	const potions: Potion[] = new Array(countPotions)

	for (let i = 0; i < countPotions; i++) {
		potions[i] = getRandomPotion(task.realDifficulty)
	}

	return potions
}

export const generatePotionsByTask = (task: Task) => {
	const rewardCount = Math.min(
		Math.round((task.realDifficulty / 30) * (Math.random() / 2 + 0.5)),
		3,
	)

	if (rewardCount === 0) return { potionsArray: [], dropped: [] }

	const potionsArray = generatePotionsArrayByTask(
		task,
		Math.round(Math.random() * 125) + 75,
	)

	return {
		potionsArray,
		dropped: [
			potionsArray[Math.round((potionsArray.length * 2) / 3)],
			...generateArrayOfCommonsPotions(rewardCount - 1),
		],
	}
}
